#=========================================================================
# Toplevel Makefile for the Automatic LaTeX Build System
#=========================================================================
# Please read the documentation in 'albs-uguide.txt' for more details on
# how the Automatic LaTeX Buils System works. For most projects, a
# writer does not need to make any changes to this makefile. The key
# targets are as follows:
#
#  - default        : build the default documents
#  - install        : install documents into prefix
#  - prebuild       : prebuild files for all of the build system modules
#  - prebuild-mod   : prebuild files for the build system module 'mod'
#  - clean          : remove generated content (except autoconf files)
#  - clean-prebuild : remove the prebuild directory
#  - dist           : make a source tarball
#  - distcheck      : make a source tarball, untar it, make doc, clean
#  - distclean      : remove everything
#

#-------------------------------------------------------------------------
# Toplevel document tex files
#-------------------------------------------------------------------------
# By default, there is one document and its toplevel tex file has the
# same as the project name. To add more documents either append their
# toplevel tex files to the default_doc_texs or the
# extra_doc_texs make variables.

default_doc_texs = @PACKAGE_TARNAME@.tex
extra_doc_texs   =
doc_texs         = $(default_doc_texs) $(extra_doc_texs)

default_doc_pdfs = $(patsubst %.tex, %.pdf, $(default_doc_texs))
extra_doc_pdfs   = $(patsubst %.tex, %.pdf, $(extra_doc_texs))
doc_pdfs         = $(default_doc_pdfs) $(extra_doc_pdfs)

#-------------------------------------------------------------------------
# Setup
#-------------------------------------------------------------------------

# Remove all default implicit rules since they can cause subtle bugs
# and they just make things run slower
.SUFFIXES:
% : %,v
% : RCS/%,v
% : RCS/%
% : s.%
% : SCCS/s.%

# Default is to build the default documents
default : all
.PHONY : default

project_name := @PACKAGE_TARNAME@
project_ver  := @PACKAGE_VERSION@
top_dir      := @srcdir@
src_dir      := @srcdir@/src
scripts_dir  := $(top_dir)/scripts
images_dir   := $(top_dir)/images
prebuild_dir := $(top_dir)/prebuild
modules      := @modules@
VPATH        := $(src_dir) $(images_dir) \
                   $(addprefix $(top_dir)/, $(modules))

# Installation directories and programs

prefix  := @prefix@
DESTDIR ?= $(prefix)
install_docs_dir := $(DESTDIR)/doc

install_docs = $(default_doc_pdfs)

MKINSTALLDIRS := $(scripts_dir)/mkinstalldirs.sh
INSTALL       := @INSTALL@
INSTALL_DOC   := $(INSTALL) -m 444

# LaTeX programs

PDFLATEX = @pdflatex@ 
BIBTEX   = @bibtex@
RUNLATEX = $(scripts_dir)/run-latex.rb

#-------------------------------------------------------------------------
# Make dependency files
#-------------------------------------------------------------------------

doc_deps = $(patsubst %.tex, %.d, $(doc_texs))

$(doc_deps) : %.d : %.tex
	$(scripts_dir)/mk-latex-deps.rb $<

-include $(doc_deps)

deps : $(doc_deps)
.PHONY : deps

junk += $(doc_deps)

#-------------------------------------------------------------------------
# Include module makefile fragments
#-------------------------------------------------------------------------

modules_mk = $(addsuffix .mk, $(modules))

-include $(modules_mk)

dist_junk += $(modules_mk)

#-------------------------------------------------------------------------
# Template for per module rules
#-------------------------------------------------------------------------
# The template is instantiated for each of the modules. It relies on
# modules defining a certain set of make variables which are all
# prefixed with the module name. Since module names can have dashes in
# them (and the make variables are assumed to only use underscores), the
# template takes two arguments:
#
#  $(1) = real subproject name (ie with dashes)
#  $(2) = normalized subproject name (ie dashes replaced with underscores)
#

define module_template

# Prebuild

prebuild-$(1) : $$(addprefix $$(prebuild_dir)/, $$($(2)_prebuild))
.PHONY : prebuild-$(1)

ifeq ($$($(1)_enabled),yes)
  prebuild_to += $$($(2)_prebuild)
else
  prebuild_from += $$($(2)_prebuild)
endif

endef

# Iterate over the modules calling the template for each one

$(foreach module,$(modules), \
  $(eval $(call module_template,$(module),$(subst -,_,$(module)))))

#-------------------------------------------------------------------------
# Run LaTeX and BibTeX
#-------------------------------------------------------------------------
# Instead of running LaTeX and BibTeX directly we call a ruby script
# which handles runnning LaTeX and BibTeX the minimum number of times.

modules_include := -I . $(addprefix -I $(top_dir)/, $(modules))

$(doc_pdfs) : %.pdf : %.tex
	$(RUNLATEX) --latex-prog $(PDFLATEX) --bibtex-prog $(BIBTEX) \
      -I $(src_dir) -I $(images_dir) \
      $(modules_include) -- -halt-on-error $<

junk += $(doc_pdfs)
junk += $(patsubst %.pdf, %.out, $(doc_pdfs))
junk += $(patsubst %.pdf, %.log, $(doc_pdfs))
junk += $(patsubst %.pdf, %.aux, $(doc_pdfs))
junk += $(patsubst %.pdf, %.bbl, $(doc_pdfs))
junk += $(patsubst %.pdf, %.blg, $(doc_pdfs))
junk += $(patsubst %.pdf, %.nav, $(doc_pdfs))
junk += $(patsubst %.pdf, %.snm, $(doc_pdfs))
junk += $(patsubst %.pdf, %.toc, $(doc_pdfs))

#-------------------------------------------------------------------------
# Prebuild
#-------------------------------------------------------------------------
# Modules can specify files which can be prebuilt and then automatically
# used on platforms which do not have the proper tools to use the module.

prebuild_dir       = $(top_dir)/prebuild
prebuild_from_wdir = $(addprefix $(prebuild_dir)/, $(prebuild_from))
prebuild_to_wdir   = $(addprefix $(prebuild_dir)/, $(prebuild_to))

$(prebuild_dir) :
	mkdir $(prebuild_dir)

$(prebuild_to_wdir) : $(prebuild_dir)/% : % $(prebuild_dir)
	cp $< $@

$(prebuild_from) : % : $(prebuild_dir)/% 
	cp $< $@

prebuild : $(prebuild_dir) $(prebuild_to_wdir)
clean-prebuild :
	rm -rf $(prebuild_dir)

.PHONY : prebuild clean-prebuild

#-------------------------------------------------------------------------
# Install documents
#-------------------------------------------------------------------------

install-docs : $(install_docs)
	$(MKINSTALLDIRS) $(install_docs_dir)
	for file in $(install_docs); \
	do \
	  $(INSTALL_DOC) $$file $(install_docs_dir); \
	done

install : install-docs

.PHONY : install

#-------------------------------------------------------------------------
# Regenerate configure information
#-------------------------------------------------------------------------

configure_prereq = \
	$(top_dir)/configure.ac \
	$(top_dir)/aclocal.m4 \
	$(join $(addprefix $(top_dir)/, $(modules)), \
	       $(patsubst  %, /%.ac, $(modules)))

$(top_dir)/configure : $(configure_prereq)
	cd $(top_dir) && autoconf

config.status : $(top_dir)/configure
	./config.status --recheck

modules_mk_in = \
	$(join $(addprefix $(top_dir)/, $(modules)), \
	       $(patsubst  %, /%.mk.in, $(modules)))

Makefile : 	$(top_dir)/Makefile.in $(modules_mk_in) config.status
	./config.status

dist_junk += config.status Makefile config.log

#-------------------------------------------------------------------------
# Distribution
#-------------------------------------------------------------------------
# The distribution tarball is named project-name.tar.gz and it includes
# the src and scripts directories. You can use the distcheck target to
# try untarring the distribution and then running configure, make, and
# make distclean. A "directory is not empty" error means distclean is
# not removing everything.

dist_files = \
	README \
	COPYING \
	albs-uguide.txt \
	src \
	prebuild \
	scripts \
	images \
	configure.ac \
	aclocal.m4 \
	configure \
	Makefile.in \
	$(modules) \

project_name_ver := $(project_name)-$(project_ver)
project_tgz      := $(project_name_ver).tar.gz
dist : $(project_tgz)
$(project_tgz) :
	rm -rf $(project_name_ver)
	mkdir $(project_name_ver)
	svnversion $(top_dir) | tee $(project_name_ver)/.svnversion
	tar --exclude=.svn -C $(top_dir) -cf - $(dist_files) \
	  | tar -C $(project_name_ver) -xpf -
	tar -czvf $(project_tgz) $(project_name_ver)
	rm -rf $(project_name_ver)

distcheck : $(project_tgz)
	rm -rf $(project_name_ver)
	tar -xzvf $(project_tgz)
	mkdir -p $(project_name_ver)/build
	cd $(project_name_ver)/build; ../configure; make; make distclean
	rm -d $(project_name_ver)/build
	rm -rf $(project_name_ver)

junk += $(project_tgz) $(project_name_ver)

.PHONY : dist distcheck

#-------------------------------------------------------------------------
# Default
#-------------------------------------------------------------------------

all : $(default_doc_pdfs)
.PHONY : all

#-------------------------------------------------------------------------
# Clean up junk
#-------------------------------------------------------------------------

clean :
	rm -rf *~ \#* $(junk)

distclean :
	rm -rf *~ \#* $(junk) $(dist_junk)

.PHONY : clean distclean
